//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Scripts/Movement/PlayerInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInputActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInputActions"",
    ""maps"": [
        {
            ""name"": ""Player"",
            ""id"": ""ff1b7552-e682-4324-8819-204d7f0a7fb9"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""c0034483-6e82-4ada-bce6-09ee3eea1aea"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""8079474d-83dd-4784-b484-d640919c2d46"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Fire"",
                    ""type"": ""Button"",
                    ""id"": ""b68b69cf-ec5f-44a2-bdd0-3b0af1406de7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SwitchPlayMode"",
                    ""type"": ""Button"",
                    ""id"": ""28bf7115-f934-456f-8923-998d579e6d45"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PlaceTileRight"",
                    ""type"": ""Button"",
                    ""id"": ""57d8a746-7f19-4500-a45d-eaa732e33087"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PlaceTileLeft"",
                    ""type"": ""Button"",
                    ""id"": ""1ffa3c1b-6667-49df-a98a-505f8c4495dd"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PlaceTileDown"",
                    ""type"": ""Button"",
                    ""id"": ""9ae8f00d-e365-4336-a1d4-753ad69c8411"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PlaceTileUp"",
                    ""type"": ""Button"",
                    ""id"": ""9abab784-5771-43ee-8e39-4f8ecda9e902"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""c034bf19-8c2e-4d70-a3f0-35e725500cde"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""cf286865-9272-4628-b1d0-fca0c9db0b56"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""32cab698-28a0-4ac3-9e0e-10e2c8079435"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""253929fe-608a-45fd-bdd9-e308eb815a98"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""b39e0cc1-e611-4d9f-9bcc-8b059d3d5ca3"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""10e33548-92b3-402e-845b-f97f4e3f20ae"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""27bf0408-b76b-4342-8576-fcc6760c1c96"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Fire"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d9287f52-f03c-4704-bd15-27319f2794a1"",
                    ""path"": ""<Keyboard>/tab"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SwitchPlayMode"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d90979a9-e155-4b24-b96a-11ed5faf1394"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PlaceTileRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b62dbeef-1d05-428a-870f-c4df8f926f29"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PlaceTileLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5b793a2f-7571-47be-a64d-1e4cf7b2b27d"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PlaceTileDown"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8c74956c-848e-4f3c-beeb-08751d1e9f85"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PlaceTileUp"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Player
        m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
        m_Player_Move = m_Player.FindAction("Move", throwIfNotFound: true);
        m_Player_Jump = m_Player.FindAction("Jump", throwIfNotFound: true);
        m_Player_Fire = m_Player.FindAction("Fire", throwIfNotFound: true);
        m_Player_SwitchPlayMode = m_Player.FindAction("SwitchPlayMode", throwIfNotFound: true);
        m_Player_PlaceTileRight = m_Player.FindAction("PlaceTileRight", throwIfNotFound: true);
        m_Player_PlaceTileLeft = m_Player.FindAction("PlaceTileLeft", throwIfNotFound: true);
        m_Player_PlaceTileDown = m_Player.FindAction("PlaceTileDown", throwIfNotFound: true);
        m_Player_PlaceTileUp = m_Player.FindAction("PlaceTileUp", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player
    private readonly InputActionMap m_Player;
    private List<IPlayerActions> m_PlayerActionsCallbackInterfaces = new List<IPlayerActions>();
    private readonly InputAction m_Player_Move;
    private readonly InputAction m_Player_Jump;
    private readonly InputAction m_Player_Fire;
    private readonly InputAction m_Player_SwitchPlayMode;
    private readonly InputAction m_Player_PlaceTileRight;
    private readonly InputAction m_Player_PlaceTileLeft;
    private readonly InputAction m_Player_PlaceTileDown;
    private readonly InputAction m_Player_PlaceTileUp;
    public struct PlayerActions
    {
        private @PlayerInputActions m_Wrapper;
        public PlayerActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_Player_Move;
        public InputAction @Jump => m_Wrapper.m_Player_Jump;
        public InputAction @Fire => m_Wrapper.m_Player_Fire;
        public InputAction @SwitchPlayMode => m_Wrapper.m_Player_SwitchPlayMode;
        public InputAction @PlaceTileRight => m_Wrapper.m_Player_PlaceTileRight;
        public InputAction @PlaceTileLeft => m_Wrapper.m_Player_PlaceTileLeft;
        public InputAction @PlaceTileDown => m_Wrapper.m_Player_PlaceTileDown;
        public InputAction @PlaceTileUp => m_Wrapper.m_Player_PlaceTileUp;
        public InputActionMap Get() { return m_Wrapper.m_Player; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
            @Jump.started += instance.OnJump;
            @Jump.performed += instance.OnJump;
            @Jump.canceled += instance.OnJump;
            @Fire.started += instance.OnFire;
            @Fire.performed += instance.OnFire;
            @Fire.canceled += instance.OnFire;
            @SwitchPlayMode.started += instance.OnSwitchPlayMode;
            @SwitchPlayMode.performed += instance.OnSwitchPlayMode;
            @SwitchPlayMode.canceled += instance.OnSwitchPlayMode;
            @PlaceTileRight.started += instance.OnPlaceTileRight;
            @PlaceTileRight.performed += instance.OnPlaceTileRight;
            @PlaceTileRight.canceled += instance.OnPlaceTileRight;
            @PlaceTileLeft.started += instance.OnPlaceTileLeft;
            @PlaceTileLeft.performed += instance.OnPlaceTileLeft;
            @PlaceTileLeft.canceled += instance.OnPlaceTileLeft;
            @PlaceTileDown.started += instance.OnPlaceTileDown;
            @PlaceTileDown.performed += instance.OnPlaceTileDown;
            @PlaceTileDown.canceled += instance.OnPlaceTileDown;
            @PlaceTileUp.started += instance.OnPlaceTileUp;
            @PlaceTileUp.performed += instance.OnPlaceTileUp;
            @PlaceTileUp.canceled += instance.OnPlaceTileUp;
        }

        private void UnregisterCallbacks(IPlayerActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @Jump.started -= instance.OnJump;
            @Jump.performed -= instance.OnJump;
            @Jump.canceled -= instance.OnJump;
            @Fire.started -= instance.OnFire;
            @Fire.performed -= instance.OnFire;
            @Fire.canceled -= instance.OnFire;
            @SwitchPlayMode.started -= instance.OnSwitchPlayMode;
            @SwitchPlayMode.performed -= instance.OnSwitchPlayMode;
            @SwitchPlayMode.canceled -= instance.OnSwitchPlayMode;
            @PlaceTileRight.started -= instance.OnPlaceTileRight;
            @PlaceTileRight.performed -= instance.OnPlaceTileRight;
            @PlaceTileRight.canceled -= instance.OnPlaceTileRight;
            @PlaceTileLeft.started -= instance.OnPlaceTileLeft;
            @PlaceTileLeft.performed -= instance.OnPlaceTileLeft;
            @PlaceTileLeft.canceled -= instance.OnPlaceTileLeft;
            @PlaceTileDown.started -= instance.OnPlaceTileDown;
            @PlaceTileDown.performed -= instance.OnPlaceTileDown;
            @PlaceTileDown.canceled -= instance.OnPlaceTileDown;
            @PlaceTileUp.started -= instance.OnPlaceTileUp;
            @PlaceTileUp.performed -= instance.OnPlaceTileUp;
            @PlaceTileUp.canceled -= instance.OnPlaceTileUp;
        }

        public void RemoveCallbacks(IPlayerActions instance)
        {
            if (m_Wrapper.m_PlayerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerActions @Player => new PlayerActions(this);
    public interface IPlayerActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnFire(InputAction.CallbackContext context);
        void OnSwitchPlayMode(InputAction.CallbackContext context);
        void OnPlaceTileRight(InputAction.CallbackContext context);
        void OnPlaceTileLeft(InputAction.CallbackContext context);
        void OnPlaceTileDown(InputAction.CallbackContext context);
        void OnPlaceTileUp(InputAction.CallbackContext context);
    }
}
